name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write
  checks: write
  actions: read

env:
  GO_VERSION: '1.23'
  COVERAGE_THRESHOLD: 80  # Minimum coverage percentage required

jobs:
  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch full history for accurate coverage comparison

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        go mod download
        go mod verify
        go mod tidy

    - name: Run tests with coverage
      run: |
        mkdir -p coverage
        GO111MODULE=on go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage/coverage.out -o coverage/coverage.html
        go tool cover -func=coverage/coverage.out > coverage/coverage.txt

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Current coverage: $COVERAGE%"

    - name: Coverage threshold check
      run: |
        COVERAGE=${{ steps.coverage.outputs.percentage }}
        THRESHOLD=${{ env.COVERAGE_THRESHOLD }}
        
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
          echo "::error::Code coverage $COVERAGE% is below the required threshold of $THRESHOLD%"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi

    - name: Generate coverage badge
      run: |
        COVERAGE=${{ steps.coverage.outputs.percentage }}
        COLOR="red"
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="orange"
        fi
        
        echo "Coverage: $COVERAGE% ($COLOR)"
        mkdir -p badges
        curl -s "https://img.shields.io/badge/coverage-$COVERAGE%25-$COLOR" > badges/coverage.svg

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage/
          badges/
        retention-days: 30

    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: coverage/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          const threshold = '${{ env.COVERAGE_THRESHOLD }}';
          
          // Read detailed coverage report
          let coverageDetails = '';
          try {
            coverageDetails = fs.readFileSync('coverage/coverage.txt', 'utf8');
          } catch (err) {
            coverageDetails = 'Coverage details not available';
          }
          
          const statusIcon = parseFloat(coverage) >= parseFloat(threshold) ? '✅' : '❌';
          const statusText = parseFloat(coverage) >= parseFloat(threshold) ? 'PASS' : 'FAIL';
          
          const body = `## ${statusIcon} Code Coverage Report
          
          **Overall Coverage:** ${coverage}% (Threshold: ${threshold}%)
          **Status:** ${statusText}
          
          <details>
          <summary>📊 Coverage Details</summary>
          
          \`\`\`
          ${coverageDetails}
          \`\`\`
          </details>
          
          ---
          🔍 **Coverage Breakdown:**
          - ✅ **Passing:** Coverage meets or exceeds threshold
          - ⚠️ **Warning:** Coverage is close to threshold (within 5%)
          - ❌ **Failing:** Coverage is below threshold
          
          📈 **Improve Coverage:**
          - Add tests for uncovered functions
          - Focus on critical business logic
          - Use \`go test -coverprofile=coverage.out\` locally
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  integration-tests:
    name: Integration Tests with Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'integration-tests'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: |
        go mod download
        go mod tidy

    - name: Run integration tests
      env:
        NETBIRD_API_TOKEN: ${{ secrets.NETBIRD_API_TOKEN }}
      run: |
        if [ -n "$NETBIRD_API_TOKEN" ]; then
          echo "Running integration tests with coverage..."
          GO111MODULE=on go test -v -timeout=5m -run="Integration_" -coverprofile=integration-coverage.out ./...
        else
          echo "⚠️ NETBIRD_API_TOKEN not set - skipping integration tests"
        fi

    - name: Upload integration coverage
      if: env.NETBIRD_API_TOKEN != ''
      uses: actions/upload-artifact@v4
      with:
        name: integration-coverage
        path: integration-coverage.out

  performance-tests:
    name: Performance Tests and Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: |
        go mod download
        go mod tidy

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        GO111MODULE=on go test -v -run="Performance|StressTest" ./...

    - name: Run benchmarks
      run: |
        echo "Running benchmarks..."
        GO111MODULE=on go test -bench=. -benchmem -run=^$ ./... > benchmarks.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmarks.txt

  coverage-comparison:
    name: Coverage Comparison
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test-coverage
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v5

    - name: Checkout main branch
      run: |
        git fetch origin main:main
        git checkout main

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get main branch coverage
      run: |
        go mod download
        GO111MODULE=on go test -coverprofile=main-coverage.out ./...
        MAIN_COVERAGE=$(go tool cover -func=main-coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "main_coverage=$MAIN_COVERAGE" >> $GITHUB_ENV

    - name: Compare coverage
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const mainCoverage = parseFloat(process.env.main_coverage);
          const prCoverage = parseFloat('${{ needs.test-coverage.outputs.coverage }}');
          const diff = prCoverage - mainCoverage;
          
          let emoji = '📊';
          let status = 'No significant change';
          
          if (diff > 1) {
            emoji = '📈';
            status = 'Coverage improved!';
          } else if (diff < -1) {
            emoji = '📉';
            status = 'Coverage decreased';
          }
          
          const body = `## ${emoji} Coverage Comparison
          
          | Branch | Coverage | Change |
          |--------|----------|---------|
          | main | ${mainCoverage}% | baseline |
          | PR | ${prCoverage}% | ${diff > 0 ? '+' : ''}${diff.toFixed(1)}% |
          
          **Status:** ${status}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });