name: PR Build & Test

permissions:
  contents: read
  packages: read

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/docs.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=pr,prefix=pr-
          type=sha,prefix=sha-

    - name: Build Docker image (no push)
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar
    
    - name: Build multi-platform validation
      id: build-multi-platform
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ github.event.pull_request.number }}
        path: /tmp/image.tar
        retention-days: 7

    - name: Test Docker image
      run: |
        docker load -i /tmp/image.tar
        
        # Get the first tag from the metadata output
        IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        echo "Testing image: $IMAGE_TAG (linux/amd64)"
        
        # Test basic functionality
        docker run --rm $IMAGE_TAG --help
        
        # Test with minimal config (should fail gracefully without API token)
        timeout 10 docker run --rm \
          -e NETBIRD_API_URL=https://api.example.com \
          -e LOG_LEVEL=debug \
          $IMAGE_TAG || echo "Expected to fail without API token"
        
        echo "✅ Single-platform image (amd64) tested successfully"
        echo "✅ Multi-platform build (amd64, arm64) validated during build step"

  validate-helm-chart:
    name: Validate Helm Chart
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Validate values.yaml structure
      run: |
        echo "📋 Basic YAML validation for values.yaml"
        
        # Check if values.yaml is valid YAML
        python3 -c "import yaml; yaml.safe_load(open('charts/netbird-api-exporter/values.yaml', 'r'))"
        echo "✅ values.yaml is valid YAML"
        
        # Check if values.schema.json is valid JSON (if it exists)
        if [ -f "charts/netbird-api-exporter/values.schema.json" ]; then
          python3 -c "import json; json.load(open('charts/netbird-api-exporter/values.schema.json', 'r'))"
          echo "✅ values.schema.json is valid JSON"
        else
          echo "⚠️ No values.schema.json found"
        fi

    - name: Lint Helm chart
      run: |
        helm lint charts/netbird-api-exporter --strict

    - name: Validate Helm chart syntax
      run: |
        helm template netbird-api-exporter charts/netbird-api-exporter \
          --values charts/netbird-api-exporter/values.yaml \
          --dry-run \
          --debug > /tmp/helm-template-output.yaml
        
        # Check that the template output is valid YAML
        cat /tmp/helm-template-output.yaml

    - name: Test Helm chart with different values
      env:
        NETBIRD_API_TOKEN: ${{ secrets.NETBIRD_API_TOKEN }}
      run: |
        # Determine token to use for testing
        if [ -n "$NETBIRD_API_TOKEN" ]; then
          TEST_TOKEN="$NETBIRD_API_TOKEN"
          TEST_API_URL="https://api.netbird.io"
          echo "🔑 Using real NetBird API token for Helm chart testing"
        else
          TEST_TOKEN="test-token"
          TEST_API_URL="https://api.example.com"
          echo "⚠️ Using dummy token for Helm chart testing"
        fi

        # Test with minimal values
        helm template netbird-api-exporter charts/netbird-api-exporter \
          --set netbird.apiToken="$TEST_TOKEN" \
          --set netbird.apiUrl="$TEST_API_URL" \
          --dry-run > /dev/null

        # Test with custom image
        helm template netbird-api-exporter charts/netbird-api-exporter \
          --set image.repository="custom/repo" \
          --set image.tag="custom-tag" \
          --set netbird.apiToken="$TEST_TOKEN" \
          --dry-run > /dev/null

        # Test with ingress enabled
        helm template netbird-api-exporter charts/netbird-api-exporter \
          --set ingress.enabled=true \
          --set ingress.hosts[0].host="example.com" \
          --set ingress.hosts[0].paths[0].path="/" \
          --set ingress.hosts[0].paths[0].pathType="Prefix" \
          --set netbird.apiToken="$TEST_TOKEN" \
          --dry-run > /dev/null

        # Test with service monitor enabled
        helm template netbird-api-exporter charts/netbird-api-exporter \
          --set serviceMonitor.enabled=true \
          --set netbird.apiToken="$TEST_TOKEN" \
          --dry-run > /dev/null
        
        # Test with external secret enabled (if real token available)
        if [ -n "$NETBIRD_API_TOKEN" ]; then
          helm template netbird-api-exporter charts/netbird-api-exporter \
            --set externalSecret.enabled=true \
            --set externalSecret.secretStoreRef.name="vault-backend" \
            --set externalSecret.data[0].secretKey="netbird-api-token" \
            --set externalSecret.data[0].remoteRef.key="netbird/api" \
            --set externalSecret.data[0].remoteRef.property="token" \
            --dry-run > /dev/null
          echo "✅ External Secret configuration validated"
        fi

    - name: Validate Helm chart best practices
      run: |
        # Check for required chart metadata
        if ! grep -q "description:" charts/netbird-api-exporter/Chart.yaml; then
          echo "❌ Chart.yaml missing description"
          exit 1
        fi
        
        if ! grep -q "version:" charts/netbird-api-exporter/Chart.yaml; then
          echo "❌ Chart.yaml missing version"
          exit 1
        fi
        
        # Check for README
        if [ ! -f "charts/netbird-api-exporter/README.md" ]; then
          echo "❌ Chart missing README.md"
          exit 1
        fi
        
        # Check for values schema
        if [ ! -f "charts/netbird-api-exporter/values.schema.json" ]; then
          echo "❌ Chart missing values.schema.json"
          exit 1
        fi
        
        # Validate template structure
        helm template netbird-api-exporter charts/netbird-api-exporter --dry-run | grep -q "apiVersion: v1" || {
          echo "❌ Chart templates don't seem to generate valid Kubernetes resources"
          exit 1
        }
        
        echo "✅ Helm chart follows best practices"

    - name: Package Helm chart
      run: |
        # Test packaging without pushing
        helm package charts/netbird-api-exporter --destination /tmp/

    - name: Upload Helm chart artifact
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart-${{ github.event.pull_request.number }}
        path: /tmp/*.tgz
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
    - uses: actions/checkout@v5

    - name: Download Docker image artifact
      uses: actions/download-artifact@v5
      with:
        name: docker-image-${{ github.event.pull_request.number }}
        path: /tmp/

    - name: Load Docker image
      run: |
        docker load -i /tmp/image.tar

    - name: Get first image tag for Trivy scan
      id: get-image-tag
      run: |
        # Get the first tag from the metadata output (Trivy expects single image reference)
        IMAGE_TAG=$(echo '${{ needs.build-docker-image.outputs.image-tag }}' | head -n1)
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Scanning image: $IMAGE_TAG"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.get-image-tag.outputs.image-tag }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test-with-image:
    name: Integration Test with Built Image
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
    - uses: actions/checkout@v5

    - name: Download Docker image artifact
      uses: actions/download-artifact@v5
      with:
        name: docker-image-${{ github.event.pull_request.number }}
        path: /tmp/

    - name: Load Docker image
      run: |
        docker load -i /tmp/image.tar

    - name: Test image with docker compose
      env:
        NETBIRD_API_TOKEN: ${{ secrets.NETBIRD_API_TOKEN }}
      run: |
        # Get the first tag from the metadata output
        IMAGE_TAG=$(echo '${{ needs.build-docker-image.outputs.image-tag }}' | head -n1)
        
        # Determine API URL and token based on secret availability
        if [ -n "$NETBIRD_API_TOKEN" ]; then
          API_URL="https://api.netbird.io"
          API_TOKEN="$NETBIRD_API_TOKEN"
          echo "🔑 Using real NetBird API token for integration testing"
        else
          API_URL="https://api.example.com"
          API_TOKEN="test-token"
          echo "⚠️ No API token available, using dummy values (limited testing)"
        fi
        
        # Create a test docker compose file
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          netbird-exporter:
            image: $IMAGE_TAG
            environment:
              - NETBIRD_API_URL=$API_URL
              - NETBIRD_API_TOKEN=$API_TOKEN
              - LOG_LEVEL=debug
            ports:
              - "8080:8080"
            healthcheck:
              test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
              interval: 5s
              timeout: 3s
              retries: 3
              start_period: 10s
        EOF
        
        # Start the service and test basic functionality
        docker compose -f docker-compose.test.yml up -d
        
        # Wait a bit for startup
        sleep 10
        
        # Test health endpoint (should work without valid API token)
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -s http://localhost:8080/health)
        echo "Health response: $HEALTH_RESPONSE"
        
        # Verify health response contains expected fields
        if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
          echo "✅ Health endpoint working correctly"
        else
          echo "❌ Health endpoint not returning expected response"
          exit 1
        fi
        
        # Test root endpoint (should show basic info)
        echo "Testing root endpoint..."
        curl -s http://localhost:8080/ | grep -q "NetBird API Exporter" || echo "Root endpoint accessible"
        
        # Test metrics endpoint
        echo "Testing metrics endpoint..."
        METRICS_RESPONSE=$(curl -s http://localhost:8080/metrics)
        
        # Check for basic Go metrics (should always be present)
        if echo "$METRICS_RESPONSE" | grep -q "go_"; then
          echo "✅ Basic Go metrics present"
        else
          echo "❌ Go metrics not found"
          exit 1
        fi
        
        # Check for promhttp metrics (should always be present)
        if echo "$METRICS_RESPONSE" | grep -q "promhttp_"; then
          echo "✅ Prometheus HTTP metrics present"
        else
          echo "❌ Prometheus HTTP metrics not found"
          exit 1
        fi
        
        # Enhanced testing with real API token
        if [ -n "$NETBIRD_API_TOKEN" ] && [ "$API_TOKEN" != "test-token" ]; then
          echo "🧪 Running enhanced integration tests with real API..."
          
          # Check for NetBird-specific metrics (should be present with real token)
          if echo "$METRICS_RESPONSE" | grep -q "netbird_"; then
            echo "✅ NetBird metrics are being collected"
            
            # Count different metric types
            PEERS_METRICS=$(echo "$METRICS_RESPONSE" | grep -c "netbird_peers" || echo "0")
            GROUPS_METRICS=$(echo "$METRICS_RESPONSE" | grep -c "netbird_groups" || echo "0")
            USERS_METRICS=$(echo "$METRICS_RESPONSE" | grep -c "netbird_users" || echo "0")
            
            echo "📊 Metrics collected:"
            echo "   - Peers metrics: $PEERS_METRICS"
            echo "   - Groups metrics: $GROUPS_METRICS" 
            echo "   - Users metrics: $USERS_METRICS"
            
            if [ $((PEERS_METRICS + GROUPS_METRICS + USERS_METRICS)) -gt 0 ]; then
              echo "✅ NetBird API integration working correctly"
            else
              echo "⚠️ NetBird metrics present but no data collected (might be expected)"
            fi
          else
            echo "⚠️ No NetBird-specific metrics found (API might be unreachable or token invalid)"
          fi
          
          # Test that the exporter handles API responses properly
          EXPORTER_LOGS=$(docker compose -f docker-compose.test.yml logs netbird-exporter 2>&1)
          if echo "$EXPORTER_LOGS" | grep -qi "error\|fail" && ! echo "$EXPORTER_LOGS" | grep -qi "context deadline exceeded\|connection refused"; then
            echo "⚠️ Found errors in exporter logs (might indicate issues):"
            echo "$EXPORTER_LOGS" | grep -i "error\|fail" | head -5
          else
            echo "✅ Exporter logs look healthy"
          fi
        else
          echo "ℹ️ Limited testing with dummy token - some NetBird metrics won't be available"
        fi
        
        # Cleanup
        docker compose -f docker-compose.test.yml down

  pr-summary:
    name: PR Build Summary
    runs-on: ubuntu-latest
    needs: [build-docker-image, validate-helm-chart, security-scan, integration-test-with-image]
    if: always()
    steps:
    - name: Generate PR summary
      run: |
        echo "## 🏗️ PR Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Image Build | ${{ needs.build-docker-image.result == 'success' && '✅ Success' || '❌ Failed' }} | Multi-arch build validation (amd64, arm64) + testable amd64 image |" >> $GITHUB_STEP_SUMMARY
        echo "| Helm Chart Validation | ${{ needs.validate-helm-chart.result == 'success' && '✅ Success' || '❌ Failed' }} | Schema validation, linting, templating, and packaging tests |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Success' || needs.security-scan.result == 'failure' && '⚠️ Issues Found' || '❌ Failed' }} | Trivy vulnerability scan |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Test | ${{ needs.integration-test-with-image.result == 'success' && '✅ Success' || '❌ Failed' }} | ${{ secrets.NETBIRD_API_TOKEN && 'Full API integration testing with real token' || 'Basic functionality testing with dummy token' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build-docker-image.result }}" == "success" && "${{ needs.validate-helm-chart.result }}" == "success" ]]; then
          echo "🎉 **All builds successful!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Docker image: Built and tested (multi-arch)" >> $GITHUB_STEP_SUMMARY
          echo "- Helm chart: Schema validated, linted, and packaged" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ secrets.NETBIRD_API_TOKEN }}" ]]; then
            echo "- ✅ **Enhanced testing**: Used real NetBird API token for comprehensive validation" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ **Limited testing**: No API token available, used dummy values" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Artifacts are available for download for 7 days" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some builds failed.** Please check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review the build logs for any issues" >> $GITHUB_STEP_SUMMARY
        echo "- Check security scan results in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- Once approved and merged, full release workflow will publish artifacts" >> $GITHUB_STEP_SUMMARY 